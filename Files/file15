Great! Let's now add a SettingsPage.xaml to your WPF application, ensuring it respects the MVVM pattern and integrates cleanly with your existing structure.


---

‚úÖ 1. Folder Structure Update

Create the following new files in your project:

üìÅ Views/
    ‚îî‚îÄ‚îÄ SettingsPage.xaml
üìÅ ViewModels/
    ‚îî‚îÄ‚îÄ SettingsPageViewModel.cs


---

‚úÖ 2. SettingsPage.xaml

<!-- Views/SettingsPage.xaml -->
<Page x:Class="NeuUITest.Views.SettingsPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:viewmodels="clr-namespace:NeuUITest.ViewModels"
      mc:Ignorable="d"
      Title="SettingsPage">

    <Page.DataContext>
        <viewmodels:SettingsPageViewModel />
    </Page.DataContext>

    <StackPanel Margin="20">
        <TextBlock Text="Settings" FontSize="20" FontWeight="Bold" Margin="0,0,0,10"/>
        
        <TextBlock Text="Theme:" Margin="0,10,0,0"/>
        <ComboBox Width="200"
                  SelectedItem="{Binding SelectedTheme, Mode=TwoWay}"
                  ItemsSource="{Binding AvailableThemes}" />

        <TextBlock Text="Auto Save Logs:" Margin="0,20,0,0"/>
        <CheckBox IsChecked="{Binding IsAutoSaveEnabled}" Content="Enable" />

        <Button Content="Save Settings"
                Command="{Binding SaveSettingsCommand}"
                Margin="0,20,0,0"
                Width="120" />
    </StackPanel>
</Page>


---

‚úÖ 3. SettingsPageViewModel.cs

// ViewModels/SettingsPageViewModel.cs
using NeuUITest.Helpers;
using System.Collections.ObjectModel;
using System.Windows.Input;

namespace NeuUITest.ViewModels
{
    public class SettingsPageViewModel : MainWindowBase
    {
        private string _selectedTheme = "Light";
        private bool _isAutoSaveEnabled;

        public ObservableCollection<string> AvailableThemes { get; } =
            new() { "Light", "Dark", "Blue" };

        public string SelectedTheme
        {
            get => _selectedTheme;
            set
            {
                _selectedTheme = value;
                OnPropertyChanged();
            }
        }

        public bool IsAutoSaveEnabled
        {
            get => _isAutoSaveEnabled;
            set
            {
                _isAutoSaveEnabled = value;
                OnPropertyChanged();
            }
        }

        public ICommand SaveSettingsCommand { get; }

        public SettingsPageViewModel()
        {
            SaveSettingsCommand = new RelayCommand(SaveSettings);
        }

        private void SaveSettings()
        {
            // Simulate saving settings (e.g., to a file or user settings)
            System.Diagnostics.Debug.WriteLine($"Saved Theme: {SelectedTheme}");
            System.Diagnostics.Debug.WriteLine($"Auto Save Enabled: {IsAutoSaveEnabled}");
        }
    }
}


---

‚úÖ 4. Navigation Setup (Optional)

If you want to navigate from MainWindow to SettingsPage, consider:

Adding a Frame to MainWindow.xaml

Or converting MainWindow.xaml to use NavigationWindow

Or adding a "Settings" button that opens a Window containing the page.


Example of navigation button:

private void OpenSettings()
{
    var window = new Window
    {
        Title = "Settings",
        Content = new NeuUITest.Views.SettingsPage(),
        Width = 400,
        Height = 300
    };
    window.ShowDialog();
}


---

‚úÖ Summary

You now have:

A SettingsPage.xaml view.

A corresponding SettingsPageViewModel.cs that uses the MVVM pattern.

Full binding for theme selection, settings toggle, and save command.


Let me know if you want:

Persistent settings (save/load from disk)

Dynamic theme switching

Navigation integration into MainWindow via Frame or TabControl


