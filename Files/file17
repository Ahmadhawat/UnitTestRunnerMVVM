Great question! Since you're going with Option A, here's how your MainWindow.xaml should look to:

Show the SettingsPage.xaml inside a Frame

Bind that Frame to the SettingsPage instance exposed from your MainMainWindow

(Optionally) Add a "Show Settings" button to display the settings page



---

âœ… Final MainWindow.xaml Example

<Window x:Class="NeuUITest.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:viewmodels="clr-namespace:NeuUITest.ViewModels"
        Title="Unit Test Runner" Height="700" Width="1000">

    <Window.DataContext>
        <viewmodels:MainMainWindow />
    </Window.DataContext>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>  <!-- Toolbar -->
            <RowDefinition Height="2*"/>   <!-- Console Output -->
            <RowDefinition Height="2*"/>   <!-- Summary Results -->
            <RowDefinition Height="Auto"/> <!-- Test Summary Control -->
            <RowDefinition Height="2*"/>   <!-- Settings Frame -->
        </Grid.RowDefinitions>

        <!-- Toolbar -->
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <Button Content="Browse DLL" Width="100" Command="{Binding BrowseDllViewModel.BrowseDllCommand}" />
            <TextBox Text="{Binding BrowseDllViewModel.DllPath}" Width="600" Margin="10,0" IsReadOnly="True"/>
            <Button Content="Run Tests" Width="100" Command="{Binding RunTestsViewModel.RunTestsCommand}" Margin="10,0,0,0" />
            <Button Content="Settings" Width="100" Margin="10,0,0,0"
                    Click="SettingsButton_Click"/>
        </StackPanel>

        <!-- Terminal-style raw output -->
        <ListBox Grid.Row="1" ItemsSource="{Binding ConsoleOutput}"
                 FontFamily="Consolas" FontSize="13"
                 Background="Black" Foreground="LightGray"
                 BorderBrush="Gray" BorderThickness="1" />

        <!-- Colored summary output -->
        <ListBox Grid.Row="2" ItemsSource="{Binding RunTestsViewModel.SummaryResults}"
                 FontFamily="Consolas" FontSize="13"
                 Background="White" Foreground="Black"
                 BorderBrush="Gray" BorderThickness="1">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Message}" Foreground="{Binding StatusBrush}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- NEW SUMMARY CONTROL -->
        <controls:TestSummaryControl Grid.Row="3" Margin="0,10,0,0"
                                     DataContext="{Binding TestSummaryViewModel}" />

        <!-- SETTINGS PAGE FRAME -->
        <Frame Grid.Row="4"
               Margin="0,10,0,0"
               Content="{Binding SettingsPage}" />
    </Grid>
</Window>


---

âœ… SettingsButton_Click (code-behind)

In MainWindow.xaml.cs, add this if you want the button to toggle visibility:

private void SettingsButton_Click(object sender, RoutedEventArgs e)
{
    var vm = DataContext as NeuUITest.ViewModels.MainMainWindow;
    if (vm != null)
    {
        vm.IsSettingsVisible = !vm.IsSettingsVisible;
    }
}

And bind the Frame visibility (optional):

<Frame Grid.Row="4"
       Margin="0,10,0,0"
       Visibility="{Binding IsSettingsVisible, Converter={StaticResource BoolToVisibilityConverter}}"
       Content="{Binding SettingsPage}" />

Then define a BoolToVisibilityConverter in your resources, or I can help you build one.


---

ðŸ§  Summary

Youâ€™re binding a Frame to the actual Page instance, not just the ViewModel

This ensures full MVVM compliance

Optional: You can toggle visibility dynamically


Let me know if you'd like the converter or if you want tabs or navigation instead.

