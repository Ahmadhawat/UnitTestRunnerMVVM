### `Helpers/` (Hilfsklassen)

Dieser Ordner enthält allgemeine Hilfsklassen, die in mehreren ViewModels wiederverwendet werden – insbesondere für MVVM-typische Infrastruktur.

- **`RelayCommand.cs`**  
  Diese Klasse implementiert das `ICommand`-Interface und ermöglicht es, Methoden aus dem ViewModel an die Benutzeroberfläche zu binden.  
  Sie unterstützt sowohl **synchrone** als auch **asynchrone** Ausführungen und ersetzt klassische Event-Handler in der UI.

📌 **Warum ist das wichtig?**  
In MVVM kommuniziert die UI nicht direkt mit dem Code, sondern über `Commands`. `RelayCommand` bietet eine flexible Möglichkeit, beliebige Aktionen an Schaltflächen, Menüpunkte usw. zu binden – **ohne Code-Behind**.

📌 **Beispielhafte Verwendung**:
```csharp
public ICommand RunTestsCommand { get; }
RunTestsCommand = new RelayCommand(async () => await RunTestsAsync(), () => !IsTestRunning);





### `UI/` (View)

Dieser Ordner enthält die **Benutzeroberfläche der Anwendung**, definiert ausschließlich in **XAML**.

🔒 **Wichtig:** In einer sauberen MVVM-Architektur gehört **keine Logik in den Code-Behind** (`.xaml.cs`) – alles wird über **Data Bindings** und **Commands** an das ViewModel angebunden.

---

#### Enthaltene Views:

- **`MainWindow.xaml`**  
  Hauptfenster der Anwendung. Enthält die UI-Elemente zur:
  - Auswahl einer Test-DLL
  - Ausführung der Tests
  - Anzeige der Terminalausgabe (ConsoleOutput)
  - Darstellung der Testergebnisse (SummaryResults)

- **`AboutWindow.xaml`**  
  Ein modales Dialogfenster, das Informationen wie App-Name, Version und Autor anzeigt – gebunden an `MainAboutWindow`.

- **`TestSummaryControl.xaml`**  
  Eine wiederverwendbare **UserControl**, die die Anzahl bestandener, fehlgeschlagener und aller Tests anzeigt – eingebunden in `MainWindow.xaml`.

---

#### Umgang mit Code-Behind (`.xaml.cs`)

Im Sinne von MVVM soll der Code-Behind **nur für UI-technische Initialisierungen** wie `InitializeComponent()` verwendet werden.

❌ **Keine Logik, keine Events, keine direkten Funktionsaufrufe** im Code-Behind!  
✅ Stattdessen: Alles über das zugehörige ViewModel binden (`DataContext`, `ICommand`, Properties).

---

📌 **Nutzen:**  
- Die Views zeigen **ausschließlich** Daten an, die vom ViewModel über Bindings bereitgestellt werden.
- Sie enthalten **keine Logik**, was die Wartbarkeit, Testbarkeit und Wiederverwendbarkeit verbessert.
- Designer:innen können die Views gestalten, ohne sich mit Logik befassen zu müssen.




### `UI/` (View)

Dieser Ordner enthält die **grafische Benutzeroberfläche** der Anwendung – vollständig in **XAML** definiert.

🔗 Die Views sind über **DataBindings** mit den ViewModels verbunden. Die Steuerung erfolgt durch Properties und Commands aus dem ViewModel.

---

#### Enthaltene Views:

- **`MainWindow.xaml`**  
  Hauptfenster der Anwendung. Beinhaltet die Steuerung für das Laden einer DLL, das Starten von Tests, Konsolenausgabe und Testergebnis-Zusammenfassung.

- **`AboutWindow.xaml`**  
  Zeigt App-Informationen wie Name, Version und Autor an – gebunden an ein passendes ViewModel (`MainAboutWindow`).

- **`TestSummaryControl.xaml`**  
  Wiederverwendbare `UserControl`, die den Teststatus grafisch zusammenfasst (Bestanden / Fehlgeschlagen / Gesamt).

---

#### Umgang mit Code-Behind (`.xaml.cs`)

In MVVM sollte die Logik **möglichst** im ViewModel bleiben.  
➡️ **Code-Behind ist nicht grundsätzlich verboten**, aber:

✅ Verwende Code-Behind nur für:  
- `InitializeComponent()`  
- UI-spezifische Visuals (z. B. Animationen, Fokus setzen)  
- Fenstersteuerung (`ShowDialog()`, `Close()`, `DialogResult`)  
- Ereignisse, die **keine Logik oder Datenmanipulation** enthalten

❌ Vermeide im Code-Behind:
- Geschäftslogik
- Zugriff auf Models
- direkte Button-Click-Handler

---

📌 **Fazit:**  
Die Views sollen **nur anzeigen**, was das ViewModel bereitstellt. Das hält die UI einfach, testbar und vom Verhalten getrennt. Der Code-Behind bleibt minimal und konzentriert sich nur auf rein visuelle Details.


---

## 🧩 Projekt erweitern im MVVM-Stil – am Beispiel "About"

Wenn du eine neue Funktionalität (z. B. ein neues Fenster oder eine neue UI-Komponente) hinzufügen möchtest, folge dieser Struktur:

### Beispiel: "About"-Fenster (App-Informationen anzeigen)

1. **Model anlegen (optional)**
   - ✏️ Falls nötig, erstelle ein neues Datenmodell unter `Kern/` (z. B. `ProgramInfo.cs`), um relevante Daten wie Name, Version, Autor etc. bereitzustellen.
   - ✅ Modelle enthalten **nur Daten**, keine Logik.

2. **ViewModel erstellen**
   - 📁 Lege ein neues ViewModel unter `ViewModels/` an (z. B. `MainAboutWindow.cs`).
   - Dieses ViewModel lädt die Daten (z. B. von `ProgramInfo`) und stellt sie als `public string`-Properties für das Binding bereit.
   - Falls Interaktionen nötig sind (z. B. ein Button in der View), erstelle eine `RelayCommand`-Instanz.

3. **View (XAML) erstellen**
   - 📁 Im Ordner `UI/` legst du eine neue `Window`- oder `UserControl`-Datei an (z. B. `AboutWindow.xaml`).
   - Definiere das Layout mit `TextBlock`, `StackPanel`, etc.
   - Weise das passende ViewModel als `DataContext` zu (manuell im Code-Behind oder via Binding).

4. **Code-Behind minimal halten**
   - Nur das nötigste wie `InitializeComponent()` und ggf. `ShowDialog()` (z. B. über einen Service) gehört in die `.xaml.cs`-Datei.
   - **Keine Datenlogik oder UI-Logik dort!**

5. **Service zur Anzeige (optional)**
   - Um UI-Aktionen vom ViewModel auszuführen (z. B. Fenster öffnen), implementiere ein Interface wie `IWindowService` im Ordner `Kern/Services`.
   - Die konkrete Implementierung (`WindowService`) kümmert sich dann darum, das Fenster zu öffnen.

6. **Integration im Haupt-ViewModel**
   - In `MainMainWindow.cs` oder dem zuständigen ViewModel registrierst du dein neues Sub-ViewModel (z. B. `AboutViewModel = new AboutAboutWindow(...)`)
   - Die UI (z. B. ein Button) bindet sich an einen `ShowAboutCommand` im ViewModel.

---

### 🔁 Wiederverwendung für andere Funktionen

Folge für **jede neue Funktion oder Ansicht** demselben Schema:

> 🔹 Model → 🔹 ViewModel → 🔹 View → 🔹 ggf. Service → 🔹 Command-Bindings

So bleibt die Architektur konsistent, testbar und leicht erweiterbar.

---

✅ **Tipp:**  
Teile Logik von ViewModels in Services aus, wenn sie wiederverwendet werden oder nicht direkt zur Darstellung gehören.